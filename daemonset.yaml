---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: lustre-installer-role
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "patch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lustre-installer-sa
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: luster-installer-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: lustre-installer-role
subjects:
- kind: ServiceAccount
  name: lustre-installer-sa
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: lustre-client-cm
  namespace: kube-system
data:
  wait.sh: |
    #!/bin/bash
    while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do sleep 1; done
  lustre-client-install.sh: |
    #!/bin/bash

    LUSTRE_VERSION=2.15.5
    LUSTRE_PACKAGE_VERSION="${LUSTRE_VERSION}-oci0-12-gd3b2033-1"
    #LUSTRE_PACKAGES_OBJECT_STORE_URL=https://objectstorage.us-saltlake-2.oraclecloud.com/p/fkbElfBAoUyHr_F1RqkSMc3dVQGMVs7nZNltqj8oewsSWeYefgAjFiDJcWM9WM4i/n/axehoqpdxwz4/b/packages/o/deb/${LUSTRE_VERSION}-12_dkms/client_base/
    #LUSTRE_PACKAGES_OBJECT_STORE_URL=https://objectstorage.us-ashburn-1.oraclecloud.com/p/wM0DapEKogbt5Yqh2AResKhf_dJdVyqOrToPfoxE4vjWc1j8vis4DxUjyOEt9lkA/n/axehoqpdxwz4/b/packages-mirror/o/deb/${LUSTRE_VERSION}-12_dkms/client_base/
    LUSTRE_PACKAGES_OBJECT_STORE_URL=https://objectstorage.eu-frankfurt-1.oraclecloud.com/p/_2UYvgPun0hQqMMNA0COppbWF7u5TUlHOJhJ7K-5kB7QZMoOGYc3IVPTdNHttXnm/n/fsssolutions/b/rclone-1/o/ubuntu-lustre-client/
    LUSTRE_PKG_DIR="/tmp/lustre-${LUSTRE_PACKAGE_VERSION}-packages"

    pkgs=(
        "lustre-client-modules-dkms_${LUSTRE_PACKAGE_VERSION}_amd64.deb"
        "lustre-client-utils_${LUSTRE_PACKAGE_VERSION}_amd64.deb"
    )

    # Log function for consistent logging
    log() {
        echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ") - $1"
    }
    export SYSTEMCTL_FORCE_BUS=1

    if [ -f /etc/os-release ]; then
      . /etc/os-release
      if [ "$ID" != "ubuntu" ]; then
        log "Unsupported OS ${ID}."
        exit 1
      fi
    else
      echo "/etc/os-release not found. Cannot determine OS."
      exit 1
    fi

    LUSTRE_CONFIG_FILE="/etc/modules-load.d/lustre.conf"
    if [[ -s "${LUSTRE_CONFIG_FILE}" ]]; then
      log "Lustre config file exists and is not empty."
      exit 0
    fi

    # Remove Lustre modules, wait for some time for the modules to be removed
    #umount /mount/FSZETA0 2>/dev/null|| true
    retry=0
    while which lustre_rmmod  && ! lustre_rmmod && [ $retry -lt 10 ]
    do
        log "Failed to unload Lustre modules, retry=$retry"
        sleep 30
        retry=$((retry+1))
    done

    if [ $retry -eq 10 ]; then
        log "Failed to unload Lustre modules after 5 minutes, this node likely require a reboot"
        exit 1
    fi
    log "Successfully unloaded Lustre modules, proceeding with Lustre client installation/upgrade"

    log "Removing existing lustre packages"
    apt-get remove --purge -y lustre-client-modules-dkms || true
    apt-get remove --purge -y lustre-client-utils || true

    #pre requisite for building lustre packages
    log "Installing linux headers and images for the running kernel to make sure dependencies are met"
    dpkg --configure -a
    apt-get update --yes
    apt-get install -y --no-upgrade linux-headers-$(uname -r)
    apt-get install -y --no-upgrade linux-image-$(uname -r)
    apt-get install -y --no-upgrade linux-base

    #Make sure all the above pre-requisites are installed. Otherwise no point in continuing

    dpkg --list | grep "linux-headers-$(uname -r) " || ( log "linux-headers-$(uname -r) is not installed. Exiting" && exit 1 )
    dpkg --list | grep "linux-image-$(uname -r) " || (  log "linux-image-$(uname -r) is not installed. Exiting" && exit 1 )
    dpkg --list | grep "linux-base " || ( log "linux-base is not installed. Exiting" && exit 1 )

    # Array to hold packages that are not installed
    not_installed_pkgs=()
    for package in "${pkgs[@]}"; do
        log "Checking $package installation on system."
        package_to_query="${package//_${LUSTRE_PACKAGE_VERSION}_amd64.deb/}"
        if dpkg -s "$package_to_query" | grep "install ok installed" &> /dev/null; then
            log "Package $package is already installed."
        else
            log "Package $package is not currently installed."
            not_installed_pkgs+=("$package")
        fi
    done

    # If there are any packages not installed
    if [ ${#not_installed_pkgs[@]} -ne 0 ]; then
        mkdir -p $LUSTRE_PKG_DIR
        cd $LUSTRE_PKG_DIR
        pwd
        log "Downloading and installing missing packages..."
        if ! printf '%s\n' "${not_installed_pkgs[@]}" | xargs -I{} -P8 curl -O "${LUSTRE_PACKAGES_OBJECT_STORE_URL}{}"; then
            log "Failed to download one or more packages."
            exit 1
        fi

        # Install all dependencies prior
        log "Installing depencies seperately to avoid auto install of new kernel versions"
        for pkg in $(ls *.deb)
        do
            apt-get install -y $(dpkg -I  $pkg | grep "^ Depends: " | sed -E -e 's/,/ /g' -e 's/(linux-base|linux-image-oracle|linux-image-oracle-amd64|linux-image-oracle-arm64|linux-headers-oracle|linux-headers-amd64)//g' -e 's/[,\|]//g'  -e 's/ +/ /g' | cut -f2 -d:)
        done

        log "Now installing Lustre packages alone without dependencies"
        if ! (apt-get update --yes && dpkg --ignore-depends=linux-image-oracle,linux-headers-oracle,linux-headers-amd64,inux-image-oracle-amd64,linux-image-oracle-arm64,linux-headers-oracle,linux-headers-amd64 -i ./*.deb && rm -f ./*.deb) then
            log "Failed to install one or more packages."
            exit 1
        fi
        log "Packages installed successfully."
    else
        log "All required packages are already installed."
    fi

    # Try to load kernel module, to verify kernel module
    if ! (modprobe lnet) then
        log "Failed to load kernel module"
        exit 1
    else
        default_interface=$(ip route | grep default | awk '{print $5}' | uniq)
        touch "${LUSTRE_CONFIG_FILE}"
        grep -qxF "options lnet networks=tcp($default_interface)" "${LUSTRE_CONFIG_FILE}" || echo "options lnet networks=tcp($default_interface)" >> /etc/modprobe.d/lustre.conf
        log "Module load test successful. Lustre client ready"
    fi
    exit 0
  setup.sh: |
    #!/bin/bash

    # Copy installation script to host
    cp /tmp/lustre-client-install.sh /host

    # Copy wait script to the host 
    cp /tmp/wait.sh /host

    # Ensure the scripts are executable
    /usr/bin/nsenter -m/proc/1/ns/mnt -- chmod u+x /tmp/lustre/wait.sh
    /usr/bin/nsenter -m/proc/1/ns/mnt -- chmod u+x /tmp/lustre/lustre-client-install.sh

    # Wait for the Node updates to complete
    /usr/bin/nsenter -m/proc/1/ns/mnt /tmp/lustre/wait.sh

    # Run the Lustre Setup script
    /usr/bin/nsenter -m/proc/1/ns/mnt -n/proc/1/ns/net /tmp/lustre/lustre-client-install.sh

    LUSTRE_INSTALLATION_STATUS=$?

    if [ "${LUSTRE_INSTALLATION_STATUS}" -eq 0 ]; then
      curl -X PATCH \
        -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        -H "Content-Type: application/merge-patch+json" \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        https://kubernetes.default.svc/api/v1/nodes/$NODE_NAME \
        -d '{"metadata": {"labels": {"oci.oraclecloud.com/lustre-client-configured": "true"}}}'
    fi
    echo "Waiting for 5 seconds..."
    sleep 5
    echo "Task Completed"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: lustre-installer
  namespace: kube-system
spec:
  selector:
    matchLabels:
      job: lustre-installer
  template:
    metadata:
      labels:
        job: lustre-installer
    spec:
      serviceAccountName: lustre-installer-sa
      hostPID: true
      restartPolicy: Always
      initContainers:
      - image: fra.ocir.io/orasenatdpltintegration03/test:ubuntu-image
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        name: lustre-installer
        securityContext:
          privileged: true
        args:
        - bash
        - setup.sh
        volumeMounts:
        - name: lustre-client-volume
          mountPath: /tmp/lustre-client-install.sh
          subPath: lustre-client-install.sh
        - name: lustre-client-volume
          mountPath: /tmp/wait.sh
          subPath: wait.sh
        - name: lustre-client-volume
          mountPath: /setup.sh
          subPath: setup.sh
        - name: host-mount
          mountPath: /host
      volumes:
      - name: lustre-client-volume
        configMap:
          name: lustre-client-cm
      - name: host-mount
        hostPath:
          path: /tmp/lustre
      containers:
      - image: "registry.k8s.io/pause:3.3"
        name: pause
        securityContext:  
          allowPrivilegeEscalation: false  
          runAsUser: 1000  
          readOnlyRootFilesystem: true
